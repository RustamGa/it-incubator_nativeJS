[{"D:\\it-incubator\\native_js\\Lesson_9\\src\\index.tsx":"1","D:\\it-incubator\\native_js\\Lesson_9\\src\\redux\\currencyReducer.ts":"2","D:\\it-incubator\\native_js\\Lesson_9\\src\\components\\CurrencyExchange\\CurrencyExchange.tsx":"3","D:\\it-incubator\\native_js\\Lesson_9\\src\\containers\\CurrencyExchangeContainer\\CurrencyEContainer.tsx":"4","D:\\it-incubator\\native_js\\Lesson_9\\src\\lessons\\lesson1\\lesson1.tsx":"5","D:\\it-incubator\\native_js\\Lesson_9\\src\\redux\\state.ts":"6","D:\\it-incubator\\native_js\\Lesson_9\\src\\redux\\actions.ts":"7","D:\\it-incubator\\native_js\\Lesson_9\\src\\lessons\\lesson2\\lesson2.ts":"8","D:\\it-incubator\\native_js\\Lesson_9\\src\\App.tsx":"9"},{"size":319,"mtime":1609752860853,"results":"10","hashOfConfig":"11"},{"size":2267,"mtime":1648385837636,"results":"12","hashOfConfig":"11"},{"size":4074,"mtime":1648206142939,"results":"13","hashOfConfig":"11"},{"size":6546,"mtime":1649181521266,"results":"14","hashOfConfig":"11"},{"size":1252,"mtime":1648203225400,"results":"15","hashOfConfig":"11"},{"size":350,"mtime":1648205062533,"results":"16","hashOfConfig":"11"},{"size":1630,"mtime":1648212690917,"results":"17","hashOfConfig":"11"},{"size":3099,"mtime":1651150872601,"results":"18","hashOfConfig":"11"},{"size":726,"mtime":1651152989843,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1n9mskw",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\it-incubator\\native_js\\Lesson_9\\src\\index.tsx",[],["40","41"],"D:\\it-incubator\\native_js\\Lesson_9\\src\\redux\\currencyReducer.ts",[],"D:\\it-incubator\\native_js\\Lesson_9\\src\\components\\CurrencyExchange\\CurrencyExchange.tsx",[],"D:\\it-incubator\\native_js\\Lesson_9\\src\\containers\\CurrencyExchangeContainer\\CurrencyEContainer.tsx",["42","43","44"],"import React from 'react';\r\nimport CurrencyExchange from '../../components/CurrencyExchange/CurrencyExchange';\r\nimport {CurrencyState, CurrencyType, selectCurrenciesState} from '../../redux/currencyReducer';\r\nimport {Dispatch} from 'redux';\r\nimport {\r\n    ChangeActionAC,\r\n    ChangeCurrencyFieldAC,\r\n    СhangeCurrentCurrencyAC,\r\n    CurrencyReducersTypes\r\n} from '../../redux/actions';\r\nimport {connect, ConnectedProps, useDispatch, useSelector} from 'react-redux';\r\n\r\nconst CurrencyEContainer: React.FC = () => {\r\n// способ оформления деструктуризации пропсов внутри компоненты\r\n//     const {\r\n//         currencies,\r\n//         currentCurrency,\r\n//         isBuying,\r\n//         amountOfBYN,\r\n//         amountOfCurrency,\r\n//         // setCurrencyAmount,\r\n//         // setAction,\r\n//         // changeCurrency,\r\n//         // ChangeActionAC,\r\n//         // ChangeCurrencyFieldAC,\r\n//         // СhangeCurrentCurrencyAC,\r\n//     } = props;\r\n\r\n    const dispatch = useDispatch<Dispatch<CurrencyReducersTypes>>(); // hook dispatch принимает в себя action  прокидывает его в reducer,\r\n// и дальше идет обновление стейта, dispatch некий связующий элемент, который  позволяет из страницы внести изменения\r\n// в стейт\r\n    const {\r\n        currencies,\r\n        currentCurrency,\r\n        isBuying,\r\n        amountOfBYN,\r\n        amountOfCurrency,\r\n        // setCurrencyAmount,\r\n        // setAction,\r\n        // changeCurrency,\r\n        // ChangeActionAC,\r\n        // ChangeCurrencyFieldAC,\r\n        // СhangeCurrentCurrencyAC,\r\n    } = useSelector(selectCurrenciesState);\r\n\r\n    //\r\n    let currencyRate: number = 0;\r\n    const currenciesName = currencies.map((currency: CurrencyType) => {\r\n        if (currency.currencyName === currentCurrency) {\r\n            currencyRate = isBuying ? currency.buyRate : currency.sellRate;\r\n        }\r\n        return currency.currencyName;\r\n    });\r\n\r\n    const changeCurrencyField = (e: React.ChangeEvent<HTMLInputElement>) => { // функция обработчик которая повешена на инпунты\r\n        let value = e.currentTarget.value;\r\n        if (!isFinite(+value)) return; // isFinite встроенна функция джаваскрипт, которая делает проверку является ли переданное значение конечным,\r\n        // т.е. можно ли его перевести к числу с которым можно производить какие либо арифметические действия,\r\n        // в нашем случае нужна для того чтоб пользователь не мог ввести буквы в поле ввода\r\n        if (e.currentTarget.dataset.currency) {\r\n            const trigger: string = e.currentTarget.dataset.currency;\r\n            if (trigger === 'byn') {\r\n                if (value === '') {\r\n                    dispatch(ChangeCurrencyFieldAC(value, value));\r\n                } else {\r\n                    dispatch(ChangeCurrencyFieldAC(value, (+Number(value).toFixed(2) / currencyRate).toFixed(2)));\r\n                }\r\n            } else {\r\n                if (value === '') {\r\n                    dispatch(ChangeCurrencyFieldAC(value, value));\r\n                } else {\r\n                    dispatch(ChangeCurrencyFieldAC((+Number(value).toFixed(2) * currencyRate).toFixed(2), value));\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const changeAction = (e: React.MouseEvent<HTMLSpanElement>) => {\r\n        e.currentTarget.dataset.action === 'buy' ? dispatch(ChangeActionAC(true)) : dispatch(ChangeActionAC(false));\r\n    };\r\n\r\n    const changeCurrentCurrency = (e: React.MouseEvent<HTMLLIElement>) => {\r\n        e.currentTarget.dataset.currency && dispatch(СhangeCurrentCurrencyAC(e.currentTarget.dataset.currency));\r\n    };\r\n    return (\r\n        <React.Fragment>\r\n            <CurrencyExchange //презентационная компонента\r\n                currenciesName={currenciesName}\r\n                currentCurrency={currentCurrency}\r\n                currencyRate={currencyRate}\r\n                isBuying={isBuying}\r\n                amountOfBYN={amountOfBYN}\r\n                amountOfCurrency={amountOfCurrency}\r\n                changeCurrencyField={changeCurrencyField}\r\n                changeAction={changeAction}\r\n                changeCurrentCurrency={changeCurrentCurrency}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\n// типизация деструктуризацией- {currency} - Это приходящий стейт, { currency: CurrencyState }-достаем ветку currency\r\n// и типизируем ее CurrencyState\r\n\r\n// const mapStateToProps = ({currency}: { currency: CurrencyState }): CurrencyState => {\r\n//     return {\r\n//         currencies: currency.currencies,\r\n//         currentCurrency: currency.currentCurrency,\r\n//         isBuying: currency.isBuying,\r\n//         amountOfBYN: currency.amountOfBYN,\r\n//         amountOfCurrency: currency.amountOfCurrency,\r\n//     };\r\n// };\r\n\r\n// @ts-ignore\r\n// const mapDispatchToProps = (dispatch: Dispatch<CurrencyReducersTypes>): any => {\r\n//     return {\r\n//         setCurrencyAmount(amountOfBYN: string, amountOfCurrency: string) {\r\n//             dispatch(ChangeCurrencyFieldAC(amountOfBYN, amountOfCurrency));\r\n//         },\r\n//         setAction(isBuying: boolean) {\r\n//             dispatch(ChangeActionAC(isBuying));\r\n//         },\r\n//         changeCurrency(currency: string) {\r\n//             dispatch(СhangeCurrentCurrencyAC(currency));\r\n//         },\r\n//     };\r\n// };\r\n\r\n// const connector = connect(mapStateToProps, {});\r\n\r\n// const connector = connect(mapStateToProps, {ChangeActionAC,\r\n//     ChangeCurrencyFieldAC,\r\n//     СhangeCurrentCurrencyAC,}); // сохраняем функцию которая возвращается от коннекта\r\n// в отдельную переменную и методом ConnectedProps(предоставляет библиотека react-redux) забираем типы с этой функции\r\n// type TProps = ConnectedProps<typeof connector>; // через стандартную тайпскриптовую штуку получаем типизацию всего компонета\r\n//\r\n// export default connector(CurrencyEContainer);\r\n\r\nexport default CurrencyEContainer;\r\n","D:\\it-incubator\\native_js\\Lesson_9\\src\\lessons\\lesson1\\lesson1.tsx",[],"D:\\it-incubator\\native_js\\Lesson_9\\src\\redux\\state.ts",[],"D:\\it-incubator\\native_js\\Lesson_9\\src\\redux\\actions.ts",["45"],"D:\\it-incubator\\native_js\\Lesson_9\\src\\lessons\\lesson2\\lesson2.ts",["46","47"],"D:\\it-incubator\\native_js\\Lesson_9\\src\\App.tsx",["48"],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":3,"column":9,"nodeType":"55","messageId":"56","endLine":3,"endColumn":22},{"ruleId":"53","severity":1,"message":"57","line":11,"column":9,"nodeType":"55","messageId":"56","endLine":11,"endColumn":16},{"ruleId":"53","severity":1,"message":"58","line":11,"column":18,"nodeType":"55","messageId":"56","endLine":11,"endColumn":32},{"ruleId":"53","severity":1,"message":"59","line":1,"column":9,"nodeType":"55","messageId":"56","endLine":1,"endColumn":13},{"ruleId":"53","severity":1,"message":"60","line":30,"column":9,"nodeType":"55","messageId":"56","endLine":30,"endColumn":10},{"ruleId":"61","severity":1,"message":"62","line":76,"column":1,"nodeType":"63","endLine":76,"endColumn":25},{"ruleId":"53","severity":1,"message":"64","line":4,"column":8,"nodeType":"55","messageId":"56","endLine":4,"endColumn":15},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"@typescript-eslint/no-unused-vars","'CurrencyState' is defined but never used.","Identifier","unusedVar","'connect' is defined but never used.","'ConnectedProps' is defined but never used.","'type' is defined but never used.","'a' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Lesson2' is defined but never used.","no-global-assign","no-unsafe-negation"]